<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Unity 图集优化</title>
    <url>/posts/cf36b965/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>移动端性能十分宝贵，如果在开发过程中不注意优化，等到出了问题就积重难返了。今天总结一下图集优化方面的知识，通过优化图集，我们可以显著的减小包体，减轻程序运行时内存、CPU、GPU所受到的压力</p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul>
<li>图集是什么？ </li>
<li>顾名思义，图集是图片的集合</li>
</ul>
<hr>
<ul>
<li>为什么要制作图集？</li>
<li>通过将UI资源打包成图集，可以显著的降低DarwCall</li>
</ul>
<hr>
<ul>
<li>什么是DarwCall？为什么要降低？</li>
<li>在unity中，每次CPU准备数据并通知GPU的过程就称之为一个DrawCall</li>
<li>如果DrawCall数量过多就会导致CPU进行大量计算，进而导致CPU的过载</li>
</ul>
<hr>
<ul>
<li>如何在Unity中查看DarwCall?</li>
<li>可以在Profiler分析器的Rendering栏查看</li>
</ul>
<hr>
<ul>
<li>DarwCall次数优化标准？</li>
<li>没有明确标准，建议维持在50左右</li>
</ul>
<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p><strong>大小</strong></p>
<ul>
<li>设置MaxSize，MaxSize会影响图集的实际大小，默认为2048</li>
<li>尽量减小图集大小，可以有效的减少空白、减小包体、节省内存</li>
</ul>
<p><strong>数量</strong></p>
<ul>
<li>纯色和UI弹窗背景图片使用九宫格小图</li>
<li>减少字体图片，使用Unity字体或者使用字体插件 </li>
<li>使用龙骨动画、spine动画，代替序列帧动画</li>
</ul>
<p><strong>压缩格式</strong></p>
<ul>
<li>检查压缩格式，<a href="https://docs.unity3d.com/Manual/class-TextureImporterOverride.html" target="_blank" rel="noopener">默认情况下，Unity编辑器会自动将纹理转换为最合适的格式</a></li>
</ul>
]]></content>
      <categories>
        <category>性能优化</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity调用iOS原生实现内购</title>
    <url>/posts/fb902642/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>前面我写了一篇文章：<a href="/posts/3549087f/" title="AppStore上架：未使用iOS原生实现内购">AppStore上架：未使用iOS原生实现内购</a>，说明了为什么最好使用原生代码实现内购，所以本篇便是介绍如何代码实现！我在代码中做了漏单处理，我们需要尽早的监听付款队列，并且要等后端验证完成后才可以结束这笔交易。因为在app启动后，系统会检查是否有未完成的交易，或者新的续订，如果有的话会加入交易队列。所以如果我们在app启动后没有及时添加监听或者监听后没有处理未完成的交易，就会造成漏单。如果我们在后端没有完成验证的情况下结束了正在进行的交易，但是不巧的是后端并没有收到你的请求，同样会造成漏单。</p>
<h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><p>在XCode工程中添加内购代码<br>1.添加IAPManager.h文件</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt; Foundation/Foundation.h &gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt; StoreKit/StoreKit.h &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">IAPManager</span> : <span class="title">NSObject</span>&lt;<span class="title">SKProductsRequestDelegate</span>, <span class="title">SKPaymentTransactionObserver</span>&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">SKProduct</span> *proUpgradeProduct;</span><br><span class="line">    <span class="built_in">SKProductsRequest</span> *productsRequest;</span><br><span class="line">    <span class="built_in">NSString</span> *productIndentify;</span><br><span class="line">&#125;</span><br><span class="line">-(<span class="keyword">void</span>)attachObserver; <span class="comment">// 监听付款队列</span></span><br><span class="line">-(<span class="built_in">BOOL</span>)CanMakePayment; <span class="comment">// 判断是否可以付款</span></span><br><span class="line">-(<span class="keyword">void</span>)requestProductData:(<span class="built_in">NSString</span> *)productIdentifiers; <span class="comment">// 获取这个ID的商品信息</span></span><br><span class="line">-(<span class="keyword">void</span>)buyRequest:(<span class="built_in">NSString</span> *)productIdentifier; <span class="comment">// 请求购买这个ID的商品</span></span><br><span class="line">-(<span class="keyword">void</span>)InitWatting; <span class="comment">// 初始化等待遮罩</span></span><br><span class="line">-(<span class="keyword">void</span>)gameServerSendProductEnd:(<span class="built_in">NSString</span> *)transactionID; <span class="comment">// 后端验证购买完成后的回调</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>2.添加IAPManager.m</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"IAPManager.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 弹窗和等待遮罩</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">IAPManager</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">UIView</span>  *_viewBg;</span><br><span class="line">    <span class="built_in">UIView</span>  *_viewBorder;</span><br><span class="line">    <span class="built_in">UIActivityIndicatorView</span> * _activityIndicator;</span><br><span class="line">    <span class="built_in">UIWindow</span> *_window;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>) attachObserver&#123;</span><br><span class="line">    [[<span class="built_in">SKPaymentQueue</span> defaultQueue] addTransactionObserver:<span class="keyword">self</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="built_in">BOOL</span>) CanMakePayment&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">SKPaymentQueue</span> canMakePayments];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>) requestProductData:(<span class="built_in">NSString</span> *)productIdentifiers&#123;</span><br><span class="line">    <span class="built_in">NSArray</span> *idArray = [productIdentifiers componentsSeparatedByString:<span class="string">@"\t"</span>];    <span class="built_in">NSSet</span> *idSet = [<span class="built_in">NSSet</span> setWithArray:idArray];</span><br><span class="line">    [<span class="keyword">self</span> sendRequest:idSet];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)sendRequest:(<span class="built_in">NSSet</span> *)idSet&#123;</span><br><span class="line">    <span class="built_in">SKProductsRequest</span> *request = [[<span class="built_in">SKProductsRequest</span> alloc] initWithProductIdentifiers:idSet];</span><br><span class="line">    request.delegate = <span class="keyword">self</span>;</span><br><span class="line">    [request start];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)productsRequest:(<span class="built_in">SKProductsRequest</span> *)request didReceiveResponse:(<span class="built_in">SKProductsResponse</span> *)response&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSArray</span> *products = response.products;</span><br><span class="line">    <span class="comment">// populate UI</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">SKProduct</span> *p <span class="keyword">in</span> products) &#123;</span><br><span class="line">        <span class="comment">// 将获取到的商品信息回传给Unity</span></span><br><span class="line">        UnitySendMessage(<span class="string">"IOSIAPMgr"</span>, <span class="string">"ShowProductList"</span>, [[<span class="keyword">self</span> productInfo:p] UTF8String]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)buyRequest:(<span class="built_in">NSString</span> *)productIdentifier&#123;</span><br><span class="line">    productIndentify=productIdentifier;</span><br><span class="line">    <span class="built_in">SKPayment</span> *payment = [<span class="built_in">SKPayment</span> paymentWithProductIdentifier:productIdentifier];</span><br><span class="line">    [[<span class="built_in">SKPaymentQueue</span> defaultQueue] addPayment:payment];</span><br><span class="line">    [<span class="keyword">self</span> showWatting];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="built_in">NSString</span> *)productInfo:(<span class="built_in">SKProduct</span> *)product&#123;</span><br><span class="line">    <span class="built_in">NSArray</span> *info = [<span class="built_in">NSArray</span> arrayWithObjects:product.localizedTitle,product.localizedDescription,product.price,product.productIdentifier, <span class="literal">nil</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [info componentsJoinedByString:<span class="string">@"\t"</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//创建一个空字典，保存正在进行的交易</span></span><br><span class="line"> <span class="built_in">NSMutableArray</span>*transArray;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  验证购买，避免非正常购买问题</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">-(<span class="keyword">void</span>)verifyPurchaseWithPaymentTransaction:(<span class="built_in">SKPaymentTransaction</span>*)tran&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">NSURL</span> *receiptUrl=[[<span class="built_in">NSBundle</span> mainBundle] appStoreReceiptURL];</span><br><span class="line">    <span class="built_in">NSData</span> *receiptData=[<span class="built_in">NSData</span> dataWithContentsOfURL:receiptUrl];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSString</span> *receiptString=[receiptData base64EncodedStringWithOptions:<span class="built_in">NSDataBase64EncodingEndLineWithLineFeed</span>];<span class="comment">//转化为base64字符串</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//除去receiptdata中的特殊字符</span></span><br><span class="line">    <span class="built_in">NSString</span> *receipt1=[receiptString stringByReplacingOccurrencesOfString:<span class="string">@"\\n"</span> withString:<span class="string">@""</span>];</span><br><span class="line">    <span class="built_in">NSString</span> *receipt2=[receipt1 stringByReplacingOccurrencesOfString:<span class="string">@"\\r"</span> withString:<span class="string">@""</span>];</span><br><span class="line">    <span class="built_in">NSString</span> *receipt3=[receipt2 stringByReplacingOccurrencesOfString:<span class="string">@"%2B"</span> withString:<span class="string">@"+"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSMutableDictionary</span> *mdic =[<span class="built_in">NSMutableDictionary</span> dictionaryWithObject:tran.transactionIdentifier forKey:<span class="string">@"TransactionID"</span>];</span><br><span class="line">    [mdic setObject:receipt3 forKey:<span class="string">@"Payload"</span>];</span><br><span class="line">    <span class="built_in">NSData</span> *data=[<span class="built_in">NSJSONSerialization</span> dataWithJSONObject:mdic options:<span class="built_in">NSJSONWritingPrettyPrinted</span> error:<span class="literal">nil</span>];</span><br><span class="line">    <span class="built_in">NSString</span> *str=[[<span class="built_in">NSString</span> alloc]initWithData:data encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 保存正在进行的交易</span></span><br><span class="line">    <span class="keyword">if</span> (transArray==<span class="literal">nil</span>) &#123;</span><br><span class="line">        transArray=[<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    &#125;</span><br><span class="line">    [transArray addObject:tran];</span><br><span class="line">    <span class="comment">// 通知Unity购买成功，将数据交由后端去苹果后台进行验证</span></span><br><span class="line">    UnitySendMessage(<span class="string">"IOSIAPMgr"</span>, <span class="string">"BuyProductSucessCallBack"</span>, str.UTF8String);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交易结果返回，根据状态进行不同的处理</span></span><br><span class="line">- (<span class="keyword">void</span>)paymentQueue:(<span class="built_in">SKPaymentQueue</span> *)queue updatedTransactions:(<span class="built_in">NSArray</span> *)transaction&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">SKPaymentTransaction</span> *tran <span class="keyword">in</span> transaction)&#123;</span><br><span class="line">        <span class="keyword">switch</span> (tran.transactionState) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="built_in">SKPaymentTransactionStatePurchased</span>:&#123;</span><br><span class="line">                <span class="comment">// 进行验证</span></span><br><span class="line">                [<span class="keyword">self</span> verifyPurchaseWithPaymentTransaction:tran];</span><br><span class="line">            &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="built_in">SKPaymentTransactionStatePurchasing</span>:&#123;</span><br><span class="line">                [<span class="keyword">self</span> showWatting];</span><br><span class="line">            &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="built_in">SKPaymentTransactionStateRestored</span>:&#123;</span><br><span class="line">                [[<span class="built_in">SKPaymentQueue</span> defaultQueue] finishTransaction:tran];</span><br><span class="line">                [<span class="keyword">self</span> hideWatting];</span><br><span class="line">            &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="built_in">SKPaymentTransactionStateFailed</span>:&#123;</span><br><span class="line">                <span class="comment">// 弹窗提示交易失败</span></span><br><span class="line">                <span class="built_in">UIAlertController</span> *alertview=[<span class="built_in">UIAlertController</span> alertControllerWithTitle:<span class="string">@"交易提示"</span> message:<span class="string">@"交易失败"</span> preferredStyle:<span class="built_in">UIAlertControllerStyleAlert</span>];</span><br><span class="line">                <span class="built_in">UIAlertAction</span> *defult = [<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"确定"</span> style:<span class="built_in">UIAlertActionStyleDefault</span> handler:<span class="literal">nil</span>];</span><br><span class="line">                [alertview addAction:defult];</span><br><span class="line">                <span class="keyword">if</span> (_window==<span class="literal">nil</span>) &#123;</span><br><span class="line">                     _window = [<span class="built_in">UIApplication</span> sharedApplication].keyWindow;</span><br><span class="line">                &#125;</span><br><span class="line">                [_window.rootViewController presentViewController:alertview animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line">                <span class="comment">// 结束这笔交易</span></span><br><span class="line">                [[<span class="built_in">SKPaymentQueue</span> defaultQueue] finishTransaction:tran];</span><br><span class="line">                [<span class="keyword">self</span> hideWatting];</span><br><span class="line">            &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                [[<span class="built_in">SKPaymentQueue</span> defaultQueue] finishTransaction:tran];</span><br><span class="line">                [<span class="keyword">self</span> showWatting];</span><br><span class="line">            &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)gameServerSendProductEnd:(<span class="built_in">NSString</span> *)transactionID;&#123;</span><br><span class="line">    <span class="comment">//订单数组为空或者没有，返回</span></span><br><span class="line">    <span class="keyword">if</span> (transArray==<span class="literal">nil</span>||transArray.count==<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历订单数组，将服务端处理完成的订单移除</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;[transArray count]; i++) &#123;</span><br><span class="line">       <span class="built_in">SKPaymentTransaction</span>*tran  = transArray[i];</span><br><span class="line">        <span class="keyword">if</span> ([tran.transactionIdentifier isEqualToString:transactionID ]) &#123;</span><br><span class="line">            [transArray removeObject:tran];</span><br><span class="line">            [[<span class="built_in">SKPaymentQueue</span> defaultQueue] finishTransaction:tran];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果订单数组的元素个数为0.证明当前订单已全部处理完成，关闭等待UI</span></span><br><span class="line">    <span class="keyword">if</span> (transArray.count==<span class="number">0</span>) &#123;</span><br><span class="line">        [<span class="keyword">self</span> hideWatting];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)showWatting&#123;</span><br><span class="line">    </span><br><span class="line">    [_activityIndicator startAnimating];</span><br><span class="line">    [_window addSubview:_viewBg];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)hideWatting&#123;</span><br><span class="line">    </span><br><span class="line">    [_activityIndicator stopAnimating];</span><br><span class="line">    [_viewBg removeFromSuperview];</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)InitWatting&#123;</span><br><span class="line">    </span><br><span class="line">    _window = [<span class="built_in">UIApplication</span> sharedApplication].keyWindow;</span><br><span class="line">    </span><br><span class="line">    _viewBg = [[<span class="built_in">UIView</span> alloc ] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>,<span class="number">0</span>, <span class="built_in">UIScreen</span>.mainScreen.bounds.size.width,<span class="built_in">UIScreen</span>.mainScreen.bounds.size.height)];</span><br><span class="line">    _viewBg.backgroundColor=[<span class="built_in">UIColor</span> colorWithRed:<span class="number">0</span> green:<span class="number">0</span> blue:<span class="number">0</span> alpha:<span class="number">0.01</span>];</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    _viewBorder = [[<span class="built_in">UIView</span> alloc ] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">100</span>)];</span><br><span class="line">    [_viewBg addSubview:_viewBorder];</span><br><span class="line">    </span><br><span class="line">    _viewBorder.center= <span class="built_in">CGPointMake</span>(_viewBg.frame.size.width/<span class="number">2.0</span> ,_viewBg.frame.size.height/<span class="number">2.0</span>);</span><br><span class="line">    _viewBorder.backgroundColor =[<span class="built_in">UIColor</span> colorWithRed:<span class="number">0</span> green:<span class="number">0</span> blue:<span class="number">0</span> alpha:<span class="number">0.9</span>];</span><br><span class="line">    _viewBorder.layer.cornerRadius=<span class="number">8</span>;</span><br><span class="line">    _viewBorder.layer.masksToBounds=<span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    _activityIndicator = [[<span class="built_in">UIActivityIndicatorView</span> alloc]initWithActivityIndicatorStyle:<span class="built_in">UIActivityIndicatorViewStyleWhiteLarge</span>];</span><br><span class="line">    [_viewBorder addSubview:_activityIndicator];</span><br><span class="line">    </span><br><span class="line">    _activityIndicator.frame= <span class="built_in">CGRectMake</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">    _activityIndicator.center= <span class="built_in">CGPointMake</span>(_viewBorder.frame.size.width/<span class="number">2.0</span> ,_viewBorder.frame.size.height/<span class="number">2.0</span>);</span><br><span class="line">    _activityIndicator.hidesWhenStopped = <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>在XCode中添加和Unity交互的代码<br>1.IAPInterface.h</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt; Foundation/Foundation.h &gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">IAPInterface</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>2.IAPInterface.m</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"IAPInterface.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"IAPManager.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">IAPInterface</span></span></span><br><span class="line"><span class="meta">#if defined (__cplusplus)</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#endif</span></span><br><span class="line">    IAPManager *iapManager = <span class="literal">nil</span>;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">void</span> InitIAPManager()&#123;</span><br><span class="line">        iapManager = [[IAPManager alloc] init];</span><br><span class="line">        [iapManager attachObserver];</span><br><span class="line">        [iapManager InitWatting];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是否可以购买</span></span><br><span class="line">    <span class="keyword">bool</span> IsProductAvailable()&#123;</span><br><span class="line">        <span class="keyword">return</span> [iapManager CanMakePayment];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取商品信息</span></span><br><span class="line">    <span class="keyword">void</span> RequstProductInfo(<span class="keyword">char</span> *p)&#123;</span><br><span class="line">        <span class="built_in">NSString</span> *list = [<span class="built_in">NSString</span> stringWithUTF8String:p];</span><br><span class="line">        [iapManager requestProductData:list];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//购买商品</span></span><br><span class="line">    <span class="keyword">void</span> BuyProduct(<span class="keyword">char</span> *p)&#123;</span><br><span class="line">        [iapManager buyRequest:[<span class="built_in">NSString</span> stringWithUTF8String:p]];</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//游戏服务端发货完成移除订单</span></span><br><span class="line">    <span class="keyword">void</span> GameServerSendProductEnd(<span class="keyword">char</span> *p)&#123;</span><br><span class="line">	<span class="keyword">return</span> [iapManager gameServerSendProductEnd:[<span class="built_in">NSString</span> stringWithUTF8String:p]];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#if defined (__cplusplus)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#endif</span></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>在Unity中添加和iOS交互的代码</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IOSIAPMgr</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">if</span> UNITY_IOS</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;<span class="keyword">string</span>&gt; productInfo = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> IOSIAPMgr _instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IOSIAPMgr Instance&#123;</span><br><span class="line">        <span class="keyword">get</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(_instance==<span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">             GameObject go=<span class="keyword">new</span> GameObject(<span class="string">"IOSIAPMgr"</span>);</span><br><span class="line">             DontDestroyOnLoad (go);</span><br><span class="line">             _instance=go.AddComponent&lt;IOSIAPMgr&gt;();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> _instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Awake</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span>(_instance==<span class="literal">null</span>)&#123;</span><br><span class="line">           _instance = <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        _instance.Init();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [<span class="meta">DllImport(<span class="meta-string">"__Internal"</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">InitIAPManager</span>(<span class="params"></span>)</span>;<span class="comment">//初始化</span></span><br><span class="line">    </span><br><span class="line">    [<span class="meta">DllImport(<span class="meta-string">"__Internal"</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">bool</span> <span class="title">IsProductAvailable</span>(<span class="params"></span>)</span>;<span class="comment">//判断是否可以购买</span></span><br><span class="line">    </span><br><span class="line">    [<span class="meta">DllImport(<span class="meta-string">"__Internal"</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">RequstProductInfo</span>(<span class="params"><span class="keyword">string</span> s</span>)</span>;<span class="comment">//获取商品信息</span></span><br><span class="line">    </span><br><span class="line">    [<span class="meta">DllImport(<span class="meta-string">"__Internal"</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">BuyProduct</span>(<span class="params"><span class="keyword">string</span> s</span>)</span>;<span class="comment">//购买商品</span></span><br><span class="line"></span><br><span class="line">    [<span class="meta">DllImport(<span class="meta-string">"__Internal"</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">GameServerSendProductEnd</span>(<span class="params"><span class="keyword">string</span> transactionID</span>)</span>;<span class="comment">//游戏后端验证完成回调</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//展示商品信息</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ShowProductList</span>(<span class="params"><span class="keyword">string</span> s</span>)</span>&#123;</span><br><span class="line">        productInfo.Add(s);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span>  <span class="keyword">void</span> <span class="title">Init</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Application.platform==RuntimePlatform.IPhonePlayer) &#123;</span><br><span class="line">            InitIAPManager();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">IsProductVailable</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> IsProductAvailable();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//根据商品ID请求商品信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RequstALLProductInfo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span>(IsProductAvailable())</span><br><span class="line">        &#123;</span><br><span class="line">            RequstProductInfo(<span class="string">"your ProductID"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">IAPBuyProduct</span>(<span class="params"><span class="keyword">string</span> str</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (IsProductAvailable())</span><br><span class="line">        &#123;</span><br><span class="line">            BuyProduct(str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// IOS 购买商品成功的回调</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BuyProductSucessCallBack</span>(<span class="params"><span class="keyword">string</span> args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        IOSIAPJson json =LitJson.JsonMapper.ToObject&lt;IOSIAPJson&gt;(args);</span><br><span class="line">        ProductsArray.Add(json);</span><br><span class="line">        SendProductsToServer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;IOSIAPJson&gt; ProductsArray=<span class="keyword">new</span> List&lt;IOSIAPJson&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendProductsToServer</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cor!=<span class="literal">null</span>) &#123;</span><br><span class="line">            StopCoroutine(cor);</span><br><span class="line">        &#125;</span><br><span class="line">        cor = StartCoroutine(ieSendProductsToServer());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Coroutine cor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开启协程。每过一分钟检查一次是否有未完成的订单</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> IEnumerator <span class="title">ieSendProductsToServer</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (ProductsArray != <span class="literal">null</span>&amp;&amp; ProductsArray.Count&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> product <span class="keyword">in</span> ProductsArray) &#123;</span><br><span class="line">                <span class="keyword">string</span> json = LitJson.JsonMapper.ToJson(product);</span><br><span class="line">                FYMJ.Guide.Service.GuideServiceRequest.Instance().FangKaBack(json);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">yield</span> return new <span class="title">WaitForSeconds</span>(<span class="params"><span class="number">60f</span></span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后端验证完成，返回交易的ID</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ServerCallBack</span>(<span class="params">AnyString transactionID</span>)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrEmpty(transactionID)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ProductsArray.Count; i++) &#123;</span><br><span class="line">                IOSIAPJson json = ProductsArray[i];</span><br><span class="line">                <span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrEmpty(json.TransactionID)&amp;&amp;json.TransactionID==transactionID) &#123;</span><br><span class="line">                    ProductsArray.RemoveAt(i);</span><br><span class="line">                    i--;</span><br><span class="line">                    GameServerSendProductEnd(transactionID);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><ol>
<li>等待遮罩是为了玩家频繁下单，可以按需修改</li>
<li>请求商品信息部分我没有用到，看上去没什么用</li>
<li>协程循环发送未完成的交易，可以删除价值不大</li>
<li>上架前和上架后，拉起的支付页面长得不太一样</li>
</ol>
<p>文章内容参考了<a href="https://www.cnblogs.com/weiqiangwaideshijie/p/9103407.html" target="_blank" rel="noopener">博客园-墙外的世界</a>，不用于商业用途，如有侵权请联系，我将尽快删除。</p>
]]></content>
      <categories>
        <category>审核日记</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>iOS</tag>
        <tag>AppStore</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity FairyGUI适配</title>
    <url>/posts/3d5e8524/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>UI适配是开发过程中不可缺少的环节，适配可以让我们的UI在多分辨率的设备上不变形，保持美观。今天来谈谈我是如何在项目中来适配FairyGUI的。如果你有更好的方式或者想法，欢迎在下方留言。</p>
<h2 id="UIPanel"><a href="#UIPanel" class="headerlink" title="UIPanel"></a>UIPanel</h2><p>将Unity中的<a href="https://www.fairygui.com/docs/guide/unity/index.html#UIPanel" target="_blank" rel="noopener">UIPanel</a>的<a href="https://www.fairygui.com/docs/guide/editor/adaptation.html#%E5%85%A8%E5%B1%8F%E7%95%8C%E9%9D%A2%E9%80%82%E9%85%8D" target="_blank" rel="noopener">Fit Scrren</a>选择为Fit Size</p>
<h2 id="UI控件"><a href="#UI控件" class="headerlink" title="UI控件"></a>UI控件</h2><p>根据UI控件的类型和位置<a href="https://www.fairygui.com/docs/guide/editor/relation.html#%E8%AE%BE%E7%BD%AE%E5%85%B3%E8%81%94" target="_blank" rel="noopener">设置关联</a>。</p>
<h2 id="背景图"><a href="#背景图" class="headerlink" title="背景图"></a>背景图</h2><ul>
<li>新建<a href="https://www.fairygui.com/docs/guide/editor/loader.html" target="_blank" rel="noopener">装载器</a></li>
<li>设置<strong>填充处理为：等比缩放（无边框）</strong></li>
<li>设置<strong>对齐：左右居中、上下居中</strong></li>
<li>设置<strong>关联：对容器关联，宽-&gt;宽 高-&gt;高</strong></li>
</ul>
]]></content>
      <categories>
        <category>Unity UI</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>FairyGUI</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity UGUI适配</title>
    <url>/posts/128d17a7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>UI适配是开发过程中不可缺少的环节，适配可以让我们的UI在多分辨率的设备上不变形，保持美观。今天来谈谈我是如何在项目中来适配UGUI的。如果你有更好的方式或者想法，欢迎在下方留言。</p>
<h2 id="UI控件"><a href="#UI控件" class="headerlink" title="UI控件"></a>UI控件</h2><p>设置UI控件所在的画布</p>
<ul>
<li>UI Scale Mode为Scale Witch Screen Size</li>
<li>Reference Resolution为1280x720或1920x1080（通常为16:9）</li>
<li>Screen Match Mode为Expand</li>
</ul>
<p>根据UI控件的类型和位置设置<a href="https://docs.unity3d.com/Packages/com.unity.ugui@1.0/manual/UIBasicLayout.html" target="_blank" rel="noopener">锚点</a>。</p>
<h2 id="背景图"><a href="#背景图" class="headerlink" title="背景图"></a>背景图</h2><p>设置背景图所在的画布</p>
<ul>
<li>UI Scale Mode为Scale Witch Screen Size</li>
<li>Reference Resolution为1280x720或1920x1080（通常为16:9）</li>
<li>Screen Match Mode为Shrink</li>
</ul>
<p>设置背景图的锚点设置为左右居中，上下居中</p>
]]></content>
      <categories>
        <category>Unity UI</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>UGUI</tag>
      </tags>
  </entry>
  <entry>
    <title>使用AndroidStudio查看安卓崩溃闪退日志</title>
    <url>/posts/caf38928/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>我们经常会遇到这样的事情，开发工作终于告一段落，然后我们开开心心的发布了最新的安装程序，却收到一些玩家反馈说安装完闪退崩溃。出现这种情况呢，大概率是兼容性问题。本篇介绍Android Studio的adb调试功能，通过adb我们可以快速的定位到问题原因，帮助我们从容解决安卓端的兼容性问题。</p>
<h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><p><strong>一、启动Android Studio</strong><br><strong>二、连接安卓设备</strong></p>
<ul>
<li>真机 </li>
</ul>
<ol>
<li>打开开发者选项</li>
<li>打开USB调试选项</li>
<li>使用USB数据线连接PC和真机</li>
<li>同意真机调试授权</li>
</ol>
<ul>
<li>模拟器，以<a href="http://mumu.163.com/index.html" target="_blank" rel="noopener">网易MuMu模拟器</a>为例<br>打开cmd，输入adb connect 127.0.0.1:7555</li>
</ul>
<p><strong>三、查看Log</strong></p>
<ol>
<li>切换到Android Studio</li>
<li>打开Logcat窗口</li>
<li>运行程序到崩溃闪退位置</li>
<li>查看log</li>
</ol>
<h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>主流模拟器的设备连接代码如下：</p>
<table>
<thead>
<tr>
<th>模拟器</th>
<th>adb连接代码</th>
</tr>
</thead>
<tbody><tr>
<td>网易Mumu</td>
<td>adb connect 127.0.0.1:7555</td>
</tr>
<tr>
<td>夜神</td>
<td>adb connect 127.0.0.1:62001</td>
</tr>
<tr>
<td>逍遥</td>
<td>adb connect 127.0.0.1:21503</td>
</tr>
<tr>
<td>iTools</td>
<td>adb connect 127.0.0.1:54001</td>
</tr>
<tr>
<td>天天</td>
<td>adb connect 127.0.0.1:6555</td>
</tr>
<tr>
<td>海马玩</td>
<td>adb connect 127.0.0.1:26744</td>
</tr>
<tr>
<td>BlueStacks</td>
<td>adb connect 127.0.0.1:5555</td>
</tr>
</tbody></table>
<p>或许你想了解更多关于(<a href="https://developer.android.google.cn/studio/command-line/adb.html" target="_blank" rel="noopener">Android 调试桥 (adb)</a>)</p>
]]></content>
      <categories>
        <category>测试调试</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity调用安卓原生更新APK</title>
    <url>/posts/144fe5a4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>产品上线后免不了要迭代更新，尤其是大版本更新的时候，必须让玩家重新安装。常用方法是使用打包时的版本号结合后端配置进行控制，根据自己定义的规则，当判断需要重新安装更新时，提示玩家进行更新。我们一开始在iPhone上的处理是跳转到AppStore，Android上的处理是跳转到我们的官网，提示玩家进行下载。后来有很多安卓用户反馈不清楚如何下载、经常更新失败。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>在游戏内根据安装包的版本号和渠道号,直接下载对应的apk，下载完成后调用安卓原生进行安装。</p>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p><strong>1.Unity中使用WWW下载安卓apk，并保存到沙盒路径，调用安卓原生方法安装。</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> IEnumerator <span class="title">downloadApk</span>(<span class="params"><span class="keyword">string</span> apkURL</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">string</span> apkPath = Application.persistentDataPath + <span class="string">"temp.apk"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (File.Exists(apkPath)) &#123;</span><br><span class="line">        File.Delete(apkPath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty(apkURL)) &#123;</span><br><span class="line">        Debug.LogError(<span class="string">"下载地址为空"</span>);</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    WWW www = <span class="keyword">new</span> WWW(apkURL);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新下载进度</span></span><br><span class="line">    <span class="keyword">while</span> (!www.isDone) &#123;</span><br><span class="line">        <span class="keyword">float</span> progress =www.progress;</span><br><span class="line">        <span class="keyword">if</span> (progress&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            progress = (((<span class="keyword">int</span>)(www.progress * <span class="number">100</span>)) % <span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (progress &gt;= <span class="number">99</span>) &#123;</span><br><span class="line">            progress = <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Debug.Log(<span class="string">"下载中&#123;0&#125;%，请耐心等待..."</span>, progress);</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty(www.error)) &#123;</span><br><span class="line">        Debug.Log(<span class="string">"下载完成，开始安装"</span>);</span><br><span class="line">        <span class="keyword">var</span> bytes = www.bytes;</span><br><span class="line">        File.WriteAllBytes(apkPath, bytes);</span><br><span class="line">        <span class="comment">//调用接口进行安装</span></span><br><span class="line">        <span class="keyword">if</span> (File.Exists(apkPath)) &#123;</span><br><span class="line">            PlatformFace.Instance.InstallApk(apkPath);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//下载有错</span></span><br><span class="line">        Debug.LogWarning(<span class="string">"下载未完成"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>2.修改安卓工程</strong><br>添加权限，在AndroidMainfest.xml文件的manifest标签中添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.REQUEST_INSTALL_PACKAGES"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>配置FileProvider，适配安卓7.0以上<br>在AndroidMainfest.xml文件的application标签中添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">provider</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">"android.support.v4.content.FileProvider"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:authorities</span>=<span class="string">"$&#123;applicationId&#125;.fileprovider"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:grantUriPermissions</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">"android.support.FILE_PROVIDER_PATHS"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:resource</span>=<span class="string">"@xml/file_paths"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在res/xml文件目录下新建file_paths.xml文件，添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">paths</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">external-path</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">"files"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">path</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">paths</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在build.gradle中添加android-support-v4.jar依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">      <span class="function">implementation <span class="title">files</span><span class="params">(<span class="string">"libs/android-support-v4.jar"</span>)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>

<p>在MainActivity下添加代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//安装apk</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InstallApk</span><span class="params">(String apkPath)</span> </span>&#123;</span><br><span class="line">    File file = <span class="keyword">new</span> File(apkPath);</span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</span><br><span class="line">    <span class="keyword">if</span>(Build.VERSION.SDK_INT&gt;=<span class="number">24</span>) &#123; <span class="comment">//Android 7.0及以上</span></span><br><span class="line">        intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);</span><br><span class="line">        <span class="comment">// 参数2 清单文件中provider节点里面的authorities ; 参数3  共享的文件,即apk包的file类</span></span><br><span class="line">        Uri apkUri = FileProvider.getUriForFile(getApplicationContext(), BuildConfig.APPLICATION_ID+<span class="string">".fileprovider"</span>, file);<span class="comment">//记住修改包名</span></span><br><span class="line">        <span class="comment">//对目标应用临时授权该Uri所代表的文件</span></span><br><span class="line">        intent.setDataAndType(apkUri, <span class="string">"application/vnd.android.package-archive"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        intent.setDataAndType(Uri.fromFile(file), <span class="string">"application/vnd.android.package-archive"</span>);</span><br><span class="line">        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.startActivity(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>文章内容参考了<a href="https://blog.csdn.net/qq_37310110/article/details/98067993?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">CSDN-幻世界</a>。不用于商业用途，如有侵权请联系，我将尽快删除。<br>需要注意的是打包时的Bundle Version Code和Target API Level，如果低于设备上已安装的apk，将不能覆盖安装，需要先拆卸才可以安装。</p>
]]></content>
      <categories>
        <category>更新迭代</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity日志可视化插件LogViewer</title>
    <url>/posts/1fc8603e/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在日常开发过程中，我们可以通过UnityEditor的控制台看到打印的Log，进而帮助我们进行开发。然而发布到安卓或者iOS后，我们便看不到了，这样在有报错或者想要了解程序进程的时候非常不方便。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>推荐一款Unity商店中的插件<a href="https://assetstore.unity.com/packages/tools/integration/log-viewer-12047" target="_blank" rel="noopener">LogViewer</a>，插件描述如下</p>
<blockquote>
<p>使用这个工具，你可以很容易地检查你的编辑器控制台日志内的游戏本身！即使是在手机上！<br>你所要做的就是用鼠标（点击并拖动）或手指（触摸并拖动）在屏幕上做一个圆圈手势来显示所有这些日志<br>如果有任何问题，请访问github上的日志查看器</p>
</blockquote>
<h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ol>
<li>将插件导入到工程当中。</li>
<li>在场景中选择顶部菜单栏Reporter-&gt;Create，创建Reporter对象。</li>
<li>运行当前场景，用鼠标或者手指拖动做一个圆圈手势，即可呼出窗口。</li>
</ol>
<h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>这是一款使用OnGUI实现的Log可视化插件，并且在场景切换时不会销毁，建议发布测试包时结合Development模式使用，在发布正式包时移除。</p>
]]></content>
      <categories>
        <category>测试调试</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Android系统版本与API等级对照表</title>
    <url>/posts/a4887a20/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="对照表"><a href="#对照表" class="headerlink" title="对照表"></a>对照表</h2><table>
<thead>
<tr>
<th>Release Name</th>
<th>API Level</th>
<th>Target</th>
</tr>
</thead>
<tbody><tr>
<td>Q</td>
<td>29</td>
<td>Android 10.0</td>
</tr>
<tr>
<td>Pie</td>
<td>28</td>
<td>Android 9.0</td>
</tr>
<tr>
<td>Oreo</td>
<td>27</td>
<td>Android 8.1</td>
</tr>
<tr>
<td>Oreo</td>
<td>26</td>
<td>Android 8.0</td>
</tr>
<tr>
<td>Nougat</td>
<td>25</td>
<td>Android 7.1.1</td>
</tr>
<tr>
<td>Nougat</td>
<td>24</td>
<td>Android 7.0</td>
</tr>
<tr>
<td>Marshmallow</td>
<td>23</td>
<td>Android 6.0</td>
</tr>
<tr>
<td>Lollipop</td>
<td>22</td>
<td>Android 5.1</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>常见问题</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>OPPO上架：未适配挖孔屏</title>
    <url>/posts/9d829433/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>前一段时间安卓上架OPPO渠道审核没有通过。OPPO给出的回复为：<code>OPPO Reno3\OPPO Reno3 Pro机型已经发布上市，为了不影响您的App正常上架，请您尽快做好适配工作</code>，并且在附件中添加了未适配挖孔屏的截图（挖孔侧显示为一条黑边）。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p><strong>1.开启显示凹口模式</strong><br>如果你没有凹口屏的真机，也可以在非凹口屏 P 版本手机或者 Android 模拟器中，开启 “模拟具有凹口的显示屏” 的设置项，然后再进行调试。<br><strong>2.适配长屏幕的全面屏</strong></p>
<ul>
<li>在 Android 8.0（API 26）及更高版本中，我们可以在 <activity> 标签中使用 android：MaxAspectRatio 来声明其支持的屏幕最大宽高比。比如我们可以声明最大宽高比为 2.4：</activity></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:maxAspectRatio</span>=<span class="string">"2.4"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>对于Android 7.1及更低版本，我们可以在 <application> 元素中添加名为 android.max_aspect 的 <meta-data> 元素，如下所示：</meta-data></application></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">"android.max_aspect"</span> <span class="attr">android:value</span>=<span class="string">"2.4"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>3.适配凹形屏幕</strong><br>Google 为刘海屏显示方式提供了三种显示模式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认情况，全屏页面不可用刘海区域，非全屏页面可以进行使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 允许页面延伸到刘海区域</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 不允许使用刘海区域</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p>我们可以通过下面两种方式来指定应用在凹形屏幕的显示模式：</p>
<ul>
<li>在主题中加入android:windowLayoutInDisplayCutoutMode 属性指定显示模式：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//value-v28/styles.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme.Launcher"</span> <span class="attr">parent</span>=<span class="string">"AppTheme"</span>&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowBackground"</span>&gt;</span>@drawable/branded_launch_screens<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:statusBarColor"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowLayoutInDisplayCutoutMode"</span>&gt;</span>shortEdges<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>通过在代码中指定 Activity 的显示模式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.P) &#123;</span><br><span class="line">            WindowManager.LayoutParams lp = getWindow().getAttributes();</span><br><span class="line">            lp.layoutInDisplayCutoutMode = WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES;</span><br><span class="line">            getWindow().setAttributes(lp);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>文章内容参考了<a href="https://www.jianshu.com/p/87e74de4eaf2" target="_blank" rel="noopener">简书-石先</a>，不用于商业用途，如有侵权请联系，我将尽快删除。<br>如果你需要适配Android低版本，可以将代码封装为方法，添加上<code>@TargetApi(Build.VERSION_CODES.P)</code>特性。</p>
]]></content>
      <categories>
        <category>审核日记</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>你的项目中是否还在使用HTTP而非HPPTS</title>
    <url>/posts/bb35cfaa/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在开发过程中，http(s)可以帮我们做很多事，比如获取图片、下载文件、请求数据等等可以说是非常方便。但是如果你认真观察过你就会发现，当你访问只支持http的网站时，浏览器会警告我们这个连接不安全，同样当你在高版本的Android或者iOS系统中使用http时,也会收到一些警告或者错误，它们都会建议你使用经过SSL加密后的https而非不加密的http。</p>
<h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><p>Android从9.0/P开始，处于安全性考虑默认不允许使用http请求了，所以如果打包时你选择的Target API Level大于27(不包括27)并且没有配置是否允许使用http请求，就会抛出异常：<strong>W/System.err: java.io.IOException: Cleartext HTTP traffic to ** not permitted</strong>。当然你可以通过配置AndroidMainfest.xml文件，在application标签下新增android:usesCleartextTraffic=”true”，或者降低Target API Level来继续使用http。</p>
<h2 id="iPhone"><a href="#iPhone" class="headerlink" title="iPhone"></a>iPhone</h2><p>在iPhone上，当你在Xcode上运行你的程序，第一次进行http请求时，会收到这样的警告：<strong>You are using download over http. Currently Unity adds NSAllowsArbitraryLoads to Info.plist to simplify transition, but it will be removed soon. Please consider updating to https</strong>，就是说你仍可以将NSAppTransportSecurity添加到info.plist中来使用http，但这将是将来删除。建议您从现在开始使用https连接。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>也就是说项目当中能使用https尽量使用https，至少在我们可以选择的时候，一定要选择https。</p>
]]></content>
      <categories>
        <category>常见问题</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Unity</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>AppStore上架：未使用iOS原生实现内购</title>
    <url>/posts/3549087f/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>相信不少参加工作后有一定经济能力的朋友，或多或少都会想要拥有一台属于自己的iPhone。不得不承认，苹果设备以时尚整洁的外观以及流畅的操作系统获得了广大用户群体的喜爱。而作为开发者而言，想要发布iOS App，无非只能使用企业签名或者上架AppStore两种方式，然而企业签名不仅价格昂贵，还会经常会掉签。相比之下上架AppStore仍是首选。然而想要上架成功，必须要通过AppStore的审核，尽管我们有苹果发布的审核指南作参考，但是呢还是不能避免被拒决，何况被拒时审核人员回复的邮件往往不会明确说明具体哪个功能违规，只会列举出违反了哪一条款，而且不会一次审完所有内容。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>今天谈谈AppStore内购，众所周知苹果的内购会抽取30%分成，因为我们的项目道具收费，所以必须接入苹果内购，当时同事使用的是Unity自带的In-App Purchasing实现的内购，后来审核就一直没有通过，被拒理由一直是含有隐藏功能并给警告及延迟审核，这算是比较严重的一种，当时甚至收到了封号警告</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>后来经过仔细排查判断是内购插件的问题，因为苹果审核人员稍微透露了一下说是让认真检查有关支付代码，所以就花了两天时间改为使用苹果原生实现内购，再次提交，果然就通过了审核！</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过检查，我发现Unity自带的内购插件包里面不仅包含苹果内购还包含Google和FaceBook等支付代码。本来AppStore就对付有关的内容的审核就非常严格，比如项目中包含支付宝、微信等第三方支付代码，就算没有使用也不会通过审核。当然也有部分App在审核通过后使用H5等方式来跳过苹果内购，但是这类App一旦被举报或者复查，就会被立刻封号，所以我建议还是使用原生代码实现内购，有点事体量小、干净，如果你感兴趣可以查看<a href="/posts/fb902642/" title="Unity调用iOS原生实现内购">Unity调用iOS原生实现内购</a>这篇文章。</p>
]]></content>
      <categories>
        <category>审核日记</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>iOS</tag>
        <tag>AppStore</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity导出为XCode工程后无法选择iPhone模拟器运行</title>
    <url>/posts/e05b8785/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在手边正好没有苹果测试机，或者想要调试某个机型、系统的时候，身边又没有的时候后，就轮到模拟器出场了！</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>但是当我们正常导出Unity项目为XCode工程时，设备上明明安装了iPhone模拟器，却并发现没有模拟器运行选项。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>后来发现如果想要在XCode模拟器上运行，需要将iOS PlayerSettings中的Target SDK设置为Simulator SDK。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>发布时仍要将Target SDK切换为Devices SDK，详情参考16年的<a href="https://forum.unity.com/threads/why-there-is-device-sdk-and-simulator-sdk.428424/" target="_blank" rel="noopener">Unity官方回复</a></p>
<blockquote>
<p>stopiccot： 我先用DeviceSDK生成了Xcode项目，然后用SimulatorSDK做了同样的工作。<br>结果发现，除了Xcode项目中的小差异外，唯一的区别是libiPhone lib.a library。<br>对于设备SDK，这个库包含arm架构；对于模拟器SDK，它包含i386和x86_64架构。</p>
</blockquote>
<blockquote>
<p>Unity Technologies：我们不将fat库与模拟器库和设备库一起发布的原因是，它增大了最终项目的大小。大多数情况下，用户只需要一个设备项目或模拟器项目，因此在这些情况下，fat库不会带来任何好处，但会将最终项目文件夹的大小增加至少300MB。</p>
</blockquote>
]]></content>
      <categories>
        <category>环境折腾</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Android SDKManager无法正常升级SDK</title>
    <url>/posts/decfd98d/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在使用Unity导出安卓apk的时候，我们经常需要配置打包环境，如果不安装Android Studio的话，我们一般会选择下载ADT Bundle。<br>这里我推荐两个国内的安卓开发工具下载网站<a href="http://www.android-studio.org" target="_blank" rel="noopener">http://www.android-studio.org</a> 和<a href="https://www.androiddevtools.cn" target="_blank" rel="noopener">https://www.androiddevtools.cn</a></p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>ADT Bundle下载完成之后，打包时可能还需要启动手动升级Android SDK，那这个时候问题就来了。启动Android SDKManager后怎么也无法连接到dl.google.com来进行SDK的升级，经过一段时间摸索后发现配置host是最有效的方式。</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>1.访问站长之家的站长工具：<a href="http://tool.chinaz.com/" target="_blank" rel="noopener">http://tool.chinaz.com/</a><br>2.使用网站中的国内测速工具来测试dl-ssl.google.com<br>3.记录ping值最低的ip，比如我这里是172.217.194.93<br>4.打开C:\Windows\System32\drivers\etc\hosts 文件<br>5.在文件的最下面添加172.217.194.93 dl-ssl.google.com</p>
]]></content>
      <categories>
        <category>环境折腾</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>pattern not found</title>
    <url>/posts/36490/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>谈起Unity破解相关的问题，如果你是一名Unity开发者，那么肯定就不会陌生。<br>因为Unity虽然提供了个人版，但是个人版打包后会带有的水印，无法在产品上线时使用。<br>所以无论是为了节约成本还是为了方便使用，中小企业或独立开发者往往还是会选择破解。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>如果你以前破解过或者安装了多个版本的Unity，在再次破解时就有可能会提示“pattern not found”破解失败。</p>
<h2 id="解决方案一-重新安装"><a href="#解决方案一-重新安装" class="headerlink" title="解决方案一 重新安装"></a>解决方案一 重新安装</h2><p>删除C:\ProgramData\Unity目录，重新安装Unity。安装完成后不要运行直接破解。</p>
<h2 id="解决方案二-重新加载许可证"><a href="#解决方案二-重新加载许可证" class="headerlink" title="解决方案二 重新加载许可证"></a>解决方案二 重新加载许可证</h2><p>检查破解后是否在C:\ProgramData\Unity目录(ProgramData为隐藏文件夹)下生成Unity_lic.ulf，<br>尝试启动Unity，使用账号登录，随便打开一个工程，点击菜单栏Help/Manage License 选择Manual Activation/Load License。</p>
<h2 id="解决方案三-下载国外版Unity"><a href="#解决方案三-下载国外版Unity" class="headerlink" title="解决方案三 下载国外版Unity"></a>解决方案三 下载国外版Unity</h2><p>登录Unity国外官网，可能需要翻墙，下载安装你需要的Unity版本，安装完成后尝试破解。</p>
<h2 id="解决方案四-直接拷贝相关文件"><a href="#解决方案四-直接拷贝相关文件" class="headerlink" title="解决方案四 直接拷贝相关文件"></a>解决方案四 直接拷贝相关文件</h2><p>如果你像我一样，试过上面所办法，可能他们曾经管用过，但是后面不管用了，可以尝试直接拷贝破解相关的文件完成破解。<br>首先需要有一台电脑可以成功破解Unity，有同事可以找同事借，没有同事可以用其他电脑，没有其他电脑可以安装虚拟机 等。<br>拷贝这台电脑上的C:\ProgramData\Unity文件夹和Unity安装目录的Unity.exe文件到你的电脑上替换到相关目录的文件即可。</p>
]]></content>
      <categories>
        <category>环境折腾</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>你的Windows10许可证即将到期</title>
    <url>/posts/62056/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>最近电脑系统升级，升级后每次开机都会弹出“你的Windows10许可证即将过期”。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>重新激活我们的W10系统，这里我推荐一个自己经常使用的激活工具<strong>KMSpico</strong>。</p>
]]></content>
      <categories>
        <category>环境折腾</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>你好2020</title>
    <url>/posts/20473/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>转眼又是新的一年，回过头来发现已经是成为别人口中的“程序猿”的第三个年头。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>过去的时间里，总有一部分工作总是做了就忘，忘了又做。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>新的一年，希望通过写博客的方式，总结开发过程中遇到的一些问题。可以在积累技术经验的同时，帮助自己和同行少爬一些“坑”，毕竟在实际开发中往往是时间紧，任务重。</p>
]]></content>
  </entry>
</search>
